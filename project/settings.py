"""
Django settings for planner project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from main.handlers import CustomisedJSONFormatter
from pathlib import Path
import datetime
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "%w@7@jdglgm8x#ldrru@%4yt#$dar&l4s7ckwhle7)%r3db2j!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


SITE_ID = 3
SITE_PROTOCOL = "https://"
SITE_DOMAIN = "example.com"

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "183.10.0.7",
    "192.168.1.27",
    "192.168.1.211",
    "192.168.1.183",
    "project.local.new-app.dev",
    SITE_DOMAIN,
]

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "xxxx"
EMAIL_PORT = 465
EMAIL_HOST_USER = "xxxx"
EMAIL_HOST_PASSWORD = "xxxx"
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = "xxxx"

# Application definition

MICROSERVICES = [
    "users",
    "authentication",
    "main",
]

ADDONS = [
    "channels",
    "allauth",
    "allauth.socialaccount",
    "allauth.account",
    "allauth.socialaccount.providers.github",
    "authentication.providers.google",
    "rest_framework",
    "rest_auth",
    "rest_auth.registration",
    "drf_yasg",
    "rest_framework_jwt",
    "defender",
    "dry_rest_permissions",
    "django_user_agents",
    "tracking_analyzer",
    "django_prometheus",
]

INSTALLED_APPS = (
    [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "whitenoise.runserver_nostatic",
        "django.contrib.staticfiles",
        "django.contrib.sites",
    ]
    + ADDONS
    + MICROSERVICES
)

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "defender.middleware.FailedLoginMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "main.middleware.ExceptionLoggingMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"
ASGI_APPLICATION = "project.asgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django_prometheus.db.backends.postgresql",
        "NAME": "project",
        "USER": "project",
        "PASSWORD": "xxxx",
        "HOST": "postgresql",
        "PORT": "5432",
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_prometheus.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}

DEFENDER_REDIS_URL = "redis://redis:6379/0"

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "JWT_AUTH_COOKIE": "JWT",
    "JWT_EXPIRATION_DELTA": datetime.timedelta(minutes=6),
    "JWT_ALLOW_REFRESH": True,
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(days=7),
}


REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "authentication.serializers.RegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "users.serializers.UserSerializer"
}

JWT_AUTH = {}

REST_USE_JWT = True
# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_ROOT = BASE_DIR / "static/"
STATIC_URL = "api/static/"

MEDIA_URL = "/api/media/"
MEDIA_ROOT = BASE_DIR / "media/"

GEOIP_PATH = BASE_DIR / "geoip/"
TRACKING_ANALYZER_MAXMIND_URL = (
    "https://download.maxmind.com/app/geoip_download?edition_id="
)
TRACKING_ANALYZER_MAXMIND_CITIES = "GeoLite2-City.mmdb"
TRACKING_ANALYZER_MAXMIND_COUNTRIES = "GeoLite2-Country.mmdb"


USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


PROMETHEUS_METRIC_NAMESPACE = "planner"

LOG_PATH = os.path.join(BASE_DIR, "logs")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")


LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "json": {
            "()": CustomisedJSONFormatter,
        },
    },
    "handlers": {
        "app_log_file": {
            "level": LOG_LEVEL,
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_PATH, "app.log.json"),
            "maxBytes": 1024 * 1024 * 2000,
            "backupCount": 10,
            "formatter": "json",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["app_log_file"],
            "level": LOG_LEVEL,
        },
        "django.server": {
            "handlers": ["app_log_file"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
    },
}
